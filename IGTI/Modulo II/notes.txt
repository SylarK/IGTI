* API - Application Programming Interface

- Conjunto de serviços que permitem a conexão entre sistemas.
- A Aplicação acessa recursos de outra e não precisa necessariamente
saber a maneira com que tais dados estão chegando.
- Proporciona maior controle a quem fornece os dados.
- Pode ser vista como um contrato, representada pela documentação.
- Facilidade na integração de sistemas.
- Favorece a reutilização de softwares.
- Segurança na integração.

** REST

- Utiliza uma URI para realizar uma chamada de serviço.

** NODE.JS

- Uma plataforma baseada em eventos. Tudo é uma reação a um evento.
- Uma transação passa por várias callbacks.
- É assíncrono.

** NODE.JS -> EVENT.LOOP

-- É um loop infinito, a cada interação verifica se existem outros eventos em sua fila de eventos.
-- Quem emite o eventos é o EventEmmitter.
-- Quando o evento é executado ele é enviado para a fila de eventos, o eventLoop executa ele e depois
retorna o seu callback.

** NODE.JS -> MODULOS

-- É o mesmo que uma biblioteca no javascript.
-- Conjunto de funções que podem ser incluídas em uma aplicação.
-- Padrão : ES Modules.
-- É possível incluir um módulo que está em outro arquivo.
-- CommonJS: require
-- ESModules : import
(Modulos nativos: File System / Readline / Events / HTTP)

** NODE.JS -> EXPRESS
-- Framework utilizado na área de desenvolvimento voltado a APIs.
-- Permite que sejam servidor arquivos estáticos (express.static)

** NODE.JS -> MIDDLEWARES
-- Obj de solicitação, Obj de resposta, Próxima função no ciclo
(req, res, next)

** NODE.JS -> Gravação de LOGS
-- Uma funcionalidade extremamente importante é a de gravação dos logs.
(para controle de erros, dados, históricos, etc.)
-- Aplicação mais utilizada no NODE.JS : Winston 
----> Permite a configuração de formatos de log.
----> Suporta 7 níveis de log.

** CORS 
-- npm install cors

** SWAGGER
-- npm install swagger-ui-express

npm init
npm init -y 
npm install nodemon

- Ferramentas para consumo de endpoints -> Insomnia, Postman